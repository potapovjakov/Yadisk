name: yadisk workflow

on: [push]

jobs:

  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r yadisk/requirements.txt
    - name: Test with flake8
      run: |
        isort .
        python -m flake8

  build_and_push_to_docker_hub:
        name: Push Docker image to Docker Hub
        runs-on: ubuntu-latest
        needs: tests
        steps:
          - name: Check out the repo
            uses: actions/checkout@v2
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
          - name: Login to Docker
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
          - name: Push to Docker Hub
            uses: docker/build-push-action@v2
            with:
              context: yadisk/
              push: true
              tags: ${{ secrets.DOCKER_USERNAME }}/yadisk:latest

  vpn:
    name: Connect openvpn
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install OpenVPN
      run: |
        sudo apt update
        sudo apt install -y openvpn openvpn-systemd-resolved
        touch client.ovpn
        echo client >> client.ovpn
        echo dev tun >> client.ovpn
        echo proto tcp >> client.ovpn
        echo remote vpn.yandex-academy.ru 1194 >> client.ovpn
        echo resolv-retry infinite >> client.ovpn
        echo nobind >> client.ovpn
        echo persist-key >> client.ovpn
        echo persist-tun >> client.ovpn
        echo cipher AES-256-CBC >> client.ovpn
        echo verb 3 >> client.ovpn

    - name: Connect to VPN
      uses: "kota65535/github-openvpn-connect-action@v1"
      with:
          config_file: ./github/workflows/client.ovpn
          username: ${{ secrets.OVPN_USERNAME }}
          password: ${{ secrets.OVPN_PASSWORD }}
          client_key: ${{ secrets.OVPN_CLIENT_KEY }}
          tls_auth_key: ${{ secrets.OVPN_TLS_AUTH_KEY }}

  deploy:
      if: ${{ github.ref }} == 'master'
      runs-on: ubuntu-latest
      needs: vpn
      steps:
      - name: pull docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_SECRETKEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/yadisk:latest
            sudo docker-compose stop
            sudo docker-compose rm backend --force
      - name: docker-compose up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_SECRETKEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo DB_USER=${{ secrets.DB_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d --build
#  send_message:
#    runs-on: ubuntu-latest
#    needs: deploy
#    steps:
#    - name: send message
#      uses: appleboy/telegram-action@master
#      with:
#        to: ${{ secrets.TELEGRAM_TO }}
#        token: ${{ secrets.TELEGRAM_TOKEN }}
#        message: ${{ github.workflow }} для репозитория ${{ github.repository }} успешно выполнен!
