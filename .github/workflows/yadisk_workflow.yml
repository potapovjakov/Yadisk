name: yadisk workflow

on: [push]

jobs:

  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r yadisk/requirements.txt
    - name: Test with flake8
      run: |
        isort .
        python -m flake8

  build_and_push_to_docker_hub:
        name: Push Docker image to Docker Hub
        runs-on: ubuntu-latest
        needs: tests
        steps:
          - name: Check out the repo
            uses: actions/checkout@v2
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
          - name: Login to Docker
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
          - name: Push to Docker Hub
            uses: docker/build-push-action@v2
            with:
              context: yadisk/
              push: true
              tags: ${{ secrets.DOCKER_USERNAME }}/yadisk:latest

  vpn:
    name: Connect openvpn
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install and prepare OpenVPN
      run: |
        sudo apt update
        sudo apt install -y openvpn openvpn-systemd-resolved
        touch client.ovpn
        echo client >> client.ovpn
        echo dev tun >> client.ovpn
        echo proto tcp >> client.ovpn
        echo remote vpn.yandex-academy.ru 1194 >> client.ovpn
        echo resolv-retry infinite >> client.ovpn
        echo nobind >> client.ovpn
        echo persist-key >> client.ovpn
        echo persist-tun >> client.ovpn
        echo cipher AES-256-CBC >> client.ovpn
        echo verb 3 >> client.ovpn
        echo <ca>-----BEGIN CERTIFICATE-----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-----END CERTIFICATE----------BEGIN CERTIFICATE-----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-----END CERTIFICATE-----</ca> >> client.ovpn

    - name: Connect to VPN
      uses: "kota65535/github-openvpn-connect-action@v1"
      with:
          config_file: client.ovpn
          username: ${{ secrets.OVPN_USERNAME }}
          password: ${{ secrets.OVPN_PASSWORD }}
          client_key: ${{ secrets.OVPN_CLIENT_KEY }}
          tls_auth_key: ${{ secrets.OVPN_TLS_AUTH_KEY }}

  deploy:
      if: ${{ github.ref }} == 'master'
      runs-on: ubuntu-latest
      needs: vpn
      steps:
      - name: pull docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_SECRETKEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/yadisk:latest
            sudo docker-compose stop
            sudo docker-compose rm backend --force
      - name: docker-compose up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_SECRETKEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo DB_USER=${{ secrets.DB_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d --build
#  send_message:
#    runs-on: ubuntu-latest
#    needs: deploy
#    steps:
#    - name: send message
#      uses: appleboy/telegram-action@master
#      with:
#        to: ${{ secrets.TELEGRAM_TO }}
#        token: ${{ secrets.TELEGRAM_TOKEN }}
#        message: ${{ github.workflow }} для репозитория ${{ github.repository }} успешно выполнен!
